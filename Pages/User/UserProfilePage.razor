@page "/user/profile"


@inject NavigationManager _nav
@inject IAuthService _auth
@inject ISnackbar _snack
@using OnlineMall.FirebaseDB


<div class="container page">
    <div class="row">
        <div class="col-lg-4 offset-lg-4">
            <div style="position: relative;">
                <div style="height: 150px; width: 150px; clip-path:circle(); position: absolute; margin-left: 50%; transform:translateX(-50%);">
                    <img src="@_Image" style="width: 100%; height: 100%;" />
                </div>

            </div>
            <div style="text-align: center; margin-top: 20px;">
                <label style="box-shadow: 0 2px 7px #4caf50; display: inline-flex; width: 150px; justify-content: space-around; border-radius: 2em; color: white; border: 2px solid; cursor: pointer; align-items: center; padding: 16px; background-color: #4caf50;" for="fileIn" >
                   Change <MudIcon Icon="@Icons.Filled.CloudUpload" > </MudIcon>
                </label>
                <InputFile id="fileIn" OnChange="UploadF"  hidden multiple />
            </div>
            <div>
                <MudText Align="Align.Center" style="font-size: 21px;">@user.Name</MudText>
                
            </div>


        </div>
    </div>

</div>



@code {
    string _Image = "";
    bool isProcess = false;
    StorageDB fstor = new StorageDB();

    UserM user = new UserM();



    protected override void OnInitialized()
    {
        if(_auth.User != null)
        {
            user = _auth.User;
            _Image = user.Image;

            StateHasChanged();
        }
        else
        {
            _nav.NavigateTo("/auth");
        }

        base.OnInitialized();
    }




    private async void UploadF(InputFileChangeEventArgs e) {

        isProcess = true;
        StateHasChanged();

        var _file = e.GetMultipleFiles();

        try
        {



            if (_file != null)
            {



                var ite = _file[0].OpenReadStream();

                var st = await fstor.AddStoreStream(Guid.NewGuid().ToString(), Guid.NewGuid().ToString(), ite);



                if (st != null)
                {

                    var response = await _auth.UpDateUser(user);

                    if (response)
                    {
                        
                        _snack.Add("Photo Updated!", Severity.Success);
                        _Image = st;
                        StateHasChanged();
                    }
                }
                else {
                    _snack.Add("Please ReLoad The Image!", Severity.Error);
                }




            }
            else
            {
                _snack.Add("Invalid Selection!", Severity.Error);
            }

        }
        catch
        {
            _snack.Add("Unexpected Error!", Severity.Error);
        }
        finally
        {
            isProcess = false;
            StateHasChanged();
        }



    }



}
